{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--slot1 = Core link\n--slot2 = Screen link\n\n\nsystem.print(\"---------------------------------------------------------------\")\nsystem.print(\"Welcome to use Jeronimo's Advanced Scripted Technologies!\")\nsystem.print(\"Augmented Reality damage repport custom point cloud collector\")\n\nlocal function findConnectedSlots()\n    local slot = {}\n    for slotName in pairs(unit) do\n        slot = unit[slotName]\n        if type(slot) == \"table\" and unit[slotName].getClass ~= nil and slotName ~= \"system\" and slotName ~= \"library\" and\n                slotName ~= \"unit\" and\n                slotName ~= \"export\"\n         then\n            --system.print(slot.getClass())\n            if string.sub(slot.getClass(), 1, 8) == \"CoreUnit\" then\n                core = slot\n                system.print(\"Core found\")\n            end\n        end\n    end\n    if core ~= nil and slot2 ~= nil then\n        system.print(\"Links initialisation complete\")\n    else\n        system.print(\"Links initialisation failed:\")\n        system.print(\"Please link programming board to the Core to first slot, then any element to second slot\")\n        unit.exit()\n    end\nend\nfindConnectedSlots()\n\nelementsIDs = core.getElementIdList()\nsystem.print(#elementsIDs..\" elements found on the construct\")\nelementsPos = {}\n\nlocal find, lower, floor = string.find, string.lower, math.floor\nlocal s_gI, c_gEIIBI, c_gEPBI = system.getItem, core.getElementItemIdById, core.getElementPositionById\nlocal ind = 0\nlocal r = 1000\nfor i, id in ipairs(elementsIDs) do\n    local name = lower(s_gI(c_gEIIBI(id)).displayNameWithSize)\n    if find(name, \"adjust\") then\n        local pos = c_gEPBI(id)\n        ind = ind + 1\n        elementsPos[ind] = {floor(pos[1]*r)/r, floor(pos[2]*r)/r, floor(pos[3]*r)/r}\n    end\nend\nsystem.print(#elementsPos..\" elements retained for the point cloud\")\nslot2.setRenderScript(serialize(elementsPos))\nsystem.print(\"Check the screen for points cloud\")\nunit.exit()","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"local concat = table.concat\n\nlocal function internalSerialize(table, tC, t)\n    t[tC] = \"{\"\n    tC = tC + 1\n    if #table == 0 then\n        local hasValue = false\n        for key, value in pairs(table) do\n            hasValue = true\n            local keyType = type(key)\n            if keyType == \"string\" then\n                t[tC] = key .. \"=\"\n            elseif keyType == \"number\" then\n                t[tC] = \"[\" .. key .. \"]=\"\n            elseif keyType == \"boolean\" then\n                t[tC] = \"[\" .. tostring(key) .. \"]=\"\n            else\n                t[tC] = \"notsupported=\"\n            end\n            tC = tC + 1\n\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        if hasValue then\n            tC = tC - 1\n        end\n    else\n        for i = 1, #table do\n            local value = table[i]\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        tC = tC - 1\n    end\n    t[tC] = \"}\"\n    return tC\nend\n\nfunction serialize(value)\n    local t = {}\n    local check = type(value)\n\n    if check == \"table\" then\n        internalSerialize(value, 1, t)\n    elseif check == \"string\" then\n        return '\"' .. value .. '\"'\n    elseif check == \"number\" then\n        return value\n    elseif check == \"boolean\" then\n        return tostring(value)\n    else\n        return '\"Not Supported\"'\n    end\n\n    return concat(t)\nend\n\nfunction deserialize(s)\n    return load(\"return \" .. s)()\nend ","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"1"}],"methods":[],"events":[]}
